#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è reply_to_message_id
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö
 */

import pkg from 'pg';
import * as fs from 'fs/promises';
import * as path from 'path';
import { fileURLToPath } from 'url';

const { Pool } = pkg;
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://localhost:5432/school_management'
});

async function runReplyMigration() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ reply_to_message_id
    const columnExists = await client.query(`
      SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'messages' 
        AND column_name = 'reply_to_message_id'
      )
    `);
    
    if (columnExists.rows[0].exists) {
      console.log('‚úÖ –ü–æ–ª–µ reply_to_message_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      return;
    }
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, 'migrations', 'add_reply_to_message_id.sql');
    const migrationSQL = await fs.readFile(migrationPath, 'utf8');
    
    console.log('üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await client.query('BEGIN');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã
    await client.query(migrationSQL);
    
    await client.query('COMMIT');
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ reply_to_message_id –≤ —Ç–∞–±–ª–∏—Ü—É messages');
    console.log('üîó –î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è —Å–≤—è–∑–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
    console.log('‚ö° –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'messages' 
      AND column_name = 'reply_to_message_id'
    `);
    
    if (result.rows.length > 0) {
      console.log('‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', result.rows[0]);
    }
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runReplyMigration()
  .then(() => {
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });
