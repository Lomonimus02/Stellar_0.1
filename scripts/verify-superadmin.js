#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/verify-superadmin.js
 */

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { scrypt } from "crypto";
import { promisify } from "util";
import dotenv from 'dotenv';
import { users, userRoles } from '../shared/schema.ts';
import { eq } from 'drizzle-orm';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectionString = process.env.DATABASE_URL;
if (!connectionString) {
  console.error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

const sql = postgres(connectionString);
const db = drizzle(sql);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
async function verifyPassword(supplied, stored) {
  const scryptAsync = promisify(scrypt);
  if (stored.includes(".")) {
    const [hashed, salt] = stored.split(".");
    const hashedBuf = Buffer.from(hashed, "hex");
    const suppliedBuf = await scryptAsync(supplied, salt, 64);
    return hashedBuf.equals(suppliedBuf);
  } else {
    return supplied === stored;
  }
}

async function verifySuperAdmin() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è superadmin123...');
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user] = await db.select().from(users).where(eq(users.username, 'superadmin123'));
    
    if (!user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å superadmin123 –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`  ID: ${user.id}`);
    console.log(`  –õ–æ–≥–∏–Ω: ${user.username}`);
    console.log(`  –ò–º—è: ${user.firstName} ${user.lastName}`);
    console.log(`  Email: ${user.email}`);
    console.log(`  –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å: ${user.activeRole}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const passwordValid = await verifyPassword('superadmin123', user.password);
    console.log(`  –ü–∞—Ä–æ–ª—å: ${passwordValid ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' : '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const roles = await db.select().from(userRoles).where(eq(userRoles.userId, user.id));
    console.log(`  –†–æ–ª–∏ (${roles.length}):`);
    roles.forEach(role => {
      console.log(`    - ${role.role} (—à–∫–æ–ª–∞: ${role.schoolId || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ super_admin
    const hasSuperAdminRole = roles.some(role => role.role === 'super_admin');
    console.log(`  –†–æ–ª—å super_admin: ${hasSuperAdminRole ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    if (passwordValid && hasSuperAdminRole) {
      console.log('\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å superadmin123 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
      console.log('–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å —ç—Ç–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.');
    } else {
      console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    process.exit(1);
  } finally {
    await sql.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
verifySuperAdmin();
