#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ä–æ–ª—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/add-test-users.js
 */

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { scrypt, randomBytes } from "crypto";
import { promisify } from "util";
import dotenv from 'dotenv';
import { users, userRoles, schools } from '../shared/schema.ts';
import { eq } from 'drizzle-orm';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectionString = process.env.DATABASE_URL;
if (!connectionString) {
  console.error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

const sql = postgres(connectionString);
const db = drizzle(sql);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function hashPassword(password) {
  const scryptAsync = promisify(scrypt);
  const salt = randomBytes(16).toString("hex");
  const buf = await scryptAsync(password, salt, 64);
  return `${buf.toString("hex")}.${salt}`;
}

async function addTestUsers() {
  try {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ä–æ–ª—è–º–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —à–∫–æ–ª—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [school] = await db.select().from(schools).limit(1);
    if (!school) {
      console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —à–∫–æ–ª—ã. –°–æ–∑–¥–∞–π—Ç–µ —à–∫–æ–ª—É —Å–Ω–∞—á–∞–ª–∞.');
      process.exit(1);
    }

    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∫–æ–ª—É: ${school.name} (ID: ${school.id})`);

    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    const testUsers = [
      {
        username: 'director1',
        password: 'director123',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤',
        email: 'director@school.com',
        role: 'principal',
        activeRole: 'principal'
      },
      {
        username: 'viceprincipal1',
        password: 'vice123',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ó–∞–≤—É—á–µ–≤–∞',
        email: 'vice@school.com',
        role: 'vice_principal',
        activeRole: 'vice_principal'
      },
      {
        username: 'schooladmin2',
        password: 'admin123',
        firstName: '–ü–µ—Ç—Ä',
        lastName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
        email: 'admin2@school.com',
        role: 'school_admin',
        activeRole: 'school_admin'
      },
      {
        username: 'teacher1',
        password: 'teacher123',
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–£—á–∏—Ç–µ–ª–µ–≤–∞',
        email: 'teacher1@school.com',
        role: 'teacher',
        activeRole: 'teacher'
      },
      {
        username: 'classteacher1',
        password: 'class123',
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ö–ª–∞—Å—Å–Ω–∞—è',
        email: 'classteacher@school.com',
        role: 'class_teacher',
        activeRole: 'class_teacher'
      },
      {
        username: 'student1',
        password: 'student123',
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–£—á–µ–Ω–∏–∫–∏–Ω',
        email: 'student1@school.com',
        role: 'student',
        activeRole: 'student'
      },
      {
        username: 'parent1',
        password: 'parent123',
        firstName: '–û–ª—å–≥–∞',
        lastName: '–†–æ–¥–∏—Ç–µ–ª–µ–≤–∞',
        email: 'parent1@school.com',
        role: 'parent',
        activeRole: 'parent'
      }
    ];

    for (const userData of testUsers) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        const existingUsers = await db.select().from(users).where(eq(users.username, userData.username));
        if (existingUsers.length > 0) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º "${userData.username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
          continue;
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await hashPassword(userData.password);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [user] = await db.insert(users).values({
          username: userData.username,
          password: hashedPassword,
          firstName: userData.firstName,
          lastName: userData.lastName,
          email: userData.email,
          phone: null,
          activeRole: userData.activeRole,
          schoolId: school.id
        }).returning();

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.username} (${userData.firstName} ${userData.lastName}) —Å ID: ${user.id}`);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü—É user_roles
        await db.insert(userRoles).values({
          userId: user.id,
          role: userData.role,
          schoolId: school.id,
          classId: null
        });

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å "${userData.role}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.username}`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.username}:`, error.message);
      }
    }

    console.log('\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');
    console.log('\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    console.log('- director1 / director123 (–î–∏—Ä–µ–∫—Ç–æ—Ä)');
    console.log('- viceprincipal1 / vice123 (–ó–∞–≤—É—á)');
    console.log('- schooladmin2 / admin123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —à–∫–æ–ª—ã)');
    console.log('- teacher1 / teacher123 (–£—á–∏—Ç–µ–ª—å)');
    console.log('- classteacher1 / class123 (–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)');
    console.log('- student1 / student123 (–£—á–µ–Ω–∏–∫)');
    console.log('- parent1 / parent123 (–†–æ–¥–∏—Ç–µ–ª—å)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    process.exit(1);
  } finally {
    await sql.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addTestUsers();
