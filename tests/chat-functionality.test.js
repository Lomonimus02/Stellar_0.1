#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
 * 2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx tests/chat-functionality.test.js
 */

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { scrypt, randomBytes } from "crypto";
import { promisify } from "util";
import dotenv from 'dotenv';
import { users, chats, chatParticipants, schools } from '../shared/schema.ts';
import { eq, and } from 'drizzle-orm';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectionString = process.env.DATABASE_URL;
if (!connectionString) {
  console.error('DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

const sql = postgres(connectionString);
const db = drizzle(sql);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function hashPassword(password) {
  const scryptAsync = promisify(scrypt);
  const salt = randomBytes(16).toString("hex");
  const buf = await scryptAsync(password, salt, 64);
  return `${buf.toString("hex")}.${salt}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createTestUser(userData) {
  const hashedPassword = await hashPassword(userData.password);
  
  const [user] = await db.insert(users).values({
    username: userData.username,
    password: hashedPassword,
    firstName: userData.firstName,
    lastName: userData.lastName,
    email: userData.email,
    phone: null,
    activeRole: userData.activeRole,
    schoolId: userData.schoolId
  }).returning();
  
  return user;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
async function createTestChat(chatData) {
  const [chat] = await db.insert(chats).values({
    name: chatData.name,
    type: chatData.type,
    creatorId: chatData.creatorId,
    schoolId: chatData.schoolId
  }).returning();
  
  return chat;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∞—Ç
async function addChatParticipant(chatId, userId, isAdmin = false) {
  await db.insert(chatParticipants).values({
    chatId,
    userId,
    isAdmin
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
async function getChatParticipants(chatId) {
  return await db.select().from(chatParticipants).where(eq(chatParticipants.chatId, chatId));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData(testUserIds, testChatIds) {
  // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–æ–≤
  for (const chatId of testChatIds) {
    await db.delete(chatParticipants).where(eq(chatParticipants.chatId, chatId));
  }
  
  // –£–¥–∞–ª—è–µ–º —á–∞—Ç—ã
  for (const chatId of testChatIds) {
    await db.delete(chats).where(eq(chats.id, chatId));
  }
  
  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const userId of testUserIds) {
    await db.delete(users).where(eq(users.id, userId));
  }
}

async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤...\n');
  
  let testUserIds = [];
  let testChatIds = [];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —à–∫–æ–ª—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const [school] = await db.select().from(schools).limit(1);
    if (!school) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —à–∫–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤');
      return;
    }
    
    console.log(`üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∫–æ–ª—É: ${school.name} (ID: ${school.id})\n`);
    
    // === –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
    console.log('üîç –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const creator = await createTestUser({
      username: 'test_creator_' + Date.now(),
      password: 'test123',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–°–æ–∑–¥–∞—Ç–µ–ª—å',
      email: 'creator@test.com',
      activeRole: 'teacher',
      schoolId: school.id
    });
    testUserIds.push(creator.id);
    
    const participant1 = await createTestUser({
      username: 'test_participant1_' + Date.now(),
      password: 'test123',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–£—á–∞—Å—Ç–Ω–∏–∫1',
      email: 'participant1@test.com',
      activeRole: 'student',
      schoolId: school.id
    });
    testUserIds.push(participant1.id);
    
    const participant2 = await createTestUser({
      username: 'test_participant2_' + Date.now(),
      password: 'test123',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–£—á–∞—Å—Ç–Ω–∏–∫2',
      email: 'participant2@test.com',
      activeRole: 'student',
      schoolId: school.id
    });
    testUserIds.push(participant2.id);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${creator.id}, ${participant1.id}, ${participant2.id}`);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    const testChat = await createTestChat({
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç',
      type: 'group',
      creatorId: creator.id,
      schoolId: school.id
    });
    testChatIds.push(testChat.id);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: ${testChat.id}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await addChatParticipant(testChat.id, creator.id, true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await addChatParticipant(testChat.id, participant1.id, false);
    await addChatParticipant(testChat.id, participant2.id, false);
    
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ —á–∞—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const participants = await getChatParticipants(testChat.id);
    
    const creatorParticipant = participants.find(p => p.userId === creator.id);
    const participant1Data = participants.find(p => p.userId === participant1.id);
    const participant2Data = participants.find(p => p.userId === participant2.id);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    if (!creatorParticipant) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }
    
    if (!creatorParticipant.isAdmin) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
      return;
    }
    
    if (participant1Data.isAdmin || participant2Data.isAdmin) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –û–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
      return;
    }
    
    console.log('‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n');
    
    // === –¢–ï–°–¢ 2: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ===
    console.log('üîç –¢–ï–°–¢ 2: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞
    const participantsBeforeLeave = await getChatParticipants(testChat.id);
    console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ –≤—ã—Ö–æ–¥–∞: ${participantsBeforeLeave.length}`);
    
    // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥)
    await db.delete(chatParticipants).where(
      and(
        eq(chatParticipants.chatId, testChat.id),
        eq(chatParticipants.userId, participant1.id)
      )
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    const participantsAfterLeave = await getChatParticipants(testChat.id);
    console.log(`üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞: ${participantsAfterLeave.length}`);
    
    if (participantsAfterLeave.length !== participantsBeforeLeave.length - 1) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞');
      return;
    }
    
    const leftParticipant = participantsAfterLeave.find(p => p.userId === participant1.id);
    if (leftParticipant) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –£—á–∞—Å—Ç–Ω–∏–∫ –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞');
      return;
    }
    
    console.log('‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    
    // === –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
    console.log('üîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    
    const remainingParticipants = await getChatParticipants(testChat.id);
    
    for (const participant of remainingParticipants) {
      const user = await db.select().from(users).where(eq(users.id, participant.userId)).limit(1);
      if (user.length > 0) {
        const isCreator = participant.userId === testChat.creatorId;
        const shouldBeAdmin = isCreator;
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user[0].firstName} ${user[0].lastName}:`);
        console.log(`   - ID: ${participant.userId}`);
        console.log(`   - –°–æ–∑–¥–∞—Ç–µ–ª—å: ${isCreator ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${participant.isAdmin ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º: ${shouldBeAdmin ? '–î–∞' : '–ù–µ—Ç'}`);
        
        if (participant.isAdmin !== shouldBeAdmin) {
          console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user[0].firstName}`);
          return;
        }
        
        console.log('   ‚úÖ –†–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
      }
    }
    
    console.log('‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await cleanupTestData(testUserIds, testChatIds);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    await sql.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();
